#
namespace = wh_inheritance

# check parents race, kill if tigger return 1 on_birth
character_event = {
	id = wh_inheritance.0
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		# absolutely can't reproduce
		or = {
			father_even_if_dead = {
				or = {
					# greenskins
					trait = creature_orc
					trait = creature_goblin
					trait = creature_snotling
					# lizardmens
					trait = creature_skink
					# spirits
					trait = creature_forestspirit
					trait = creature_treekin
					# undeads
					is_undead_trigger = yes
					# demons
					is_demon_trigger = yes
				}
			}
			mother_even_if_dead = {
				or = {
					# greenskins
					trait = creature_orc
					trait = creature_goblin
					trait = creature_snotling
					# lizardmens
					trait = creature_skink
					# spirits
					trait = creature_forestspirit
					trait = creature_treekin
					# undeads
					is_undead_trigger = yes
					# demons
					is_demon_trigger = yes
				}
			}
			# check if mother and father have same trait
			nor = {
				# beastmen can hybridize with everyone else
				father_even_if_dead = {
					trait = creature_beastman
				}
				mother_even_if_dead = {
					trait = creature_beastman
				}
				# human
				and = {
					father_even_if_dead = {
						is_living_human_trigger = yes
					}
					mother_even_if_dead = {
						is_living_human_trigger = yes
					}
				}
				# elf
				and = {
					father_even_if_dead = {
						trait = creature_elf
					}
					mother_even_if_dead = {
						trait = creature_elf
					}
				}
				# dwarf
				and = {
					father_even_if_dead = {
						or = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
					mother_even_if_dead = {
						or = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
				}
				# halfling
				and = {
					father_even_if_dead = {
						trait = creature_halfling
					}
					mother_even_if_dead = {
						trait = creature_halfling
					}
				}
				# skaven
				and = {
					father_even_if_dead = {
						trait = creature_skaven
					}
					mother_even_if_dead = {
						trait = creature_skaven
					}
				}
				# ogre
				and = {
					father_even_if_dead = {
						trait = creature_ogre
					}
					mother_even_if_dead = {
						trait = creature_ogre
					}
				}
			}
		}
	}

	immediate = {
		log = "work event id = wh_inheritance.0 for [Root.GetBestName]"
		if = {
			limit = {
				is_invincible_trigger = yes
			}
			antideath_effect = yes
			break = yes
		}
		death = {
			death_reason = death_childbirth
		}
	}
}

# one event to set intelligence, strength, beauty, magic
character_event = {
	id = wh_inheritance.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		not = {
			has_character_flag = wh_has_event_inheritance.0
		}
		is_alive = yes
	}

	immediate = {
		log = "work event id = wh_inheritance.1 for [Root.GetBestName]"
		mother = {
			if = {
				limit = {
					has_character_flag = orgy_impregnated 
				}
				clr_character_flag = orgy_impregnated 
			}
		}
		set_character_flag = wh_has_event_inheritance.0
		# log = "wh_inheritance.1 work fine"
		# intelligence inheritance
		set_variable = {
			which = wh_inheritance
			value = 0
		}
		# calc father -6 to 7.5
		if = {
			limit = {
				father_even_if_dead = {
					trait = genius
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2.5
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = brilliant
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = quick
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1.5
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = smart
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = bright
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 0.5
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = dim
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -1
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = dumb
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -2
			}
		}
		# calc mother, according to the latest studies, the intelligence inherited from mother to a greater extent
		if = {
			limit = {
				mother_even_if_dead = {
					trait = genius
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 5
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = brilliant
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 4
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = quick
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 3
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = smart
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = bright
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = dim
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -2
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = dumb
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -4
			}
		}
		# add mutation
		random_list = {
			7 = {
				change_variable = {
					which = wh_inheritance
					value = 2
				}
			}
			18 = {
				change_variable = {
					which = wh_inheritance
					value = 1.5
				}
			}
			34 = {
				change_variable = {
					which = wh_inheritance
					value = 1
				}
			}
			49 = {
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			56 = {
				# no mutation
			}
			49 = {
				change_variable = {
					which = wh_inheritance
					value = -0.5
				}
			}
			34 = {
				change_variable = {
					which = wh_inheritance
					value = -1
				}
			}
			18 = {
				change_variable = {
					which = wh_inheritance
					value = -1.5
				}
			}
			7 = {
				change_variable = {
					which = wh_inheritance
					value = -2
				}
			}
		}
		# set trait
		# тут пиздец с проверкой переменных. пока сделаем криво. мб с патчем будет норм сравнение
		if = {
			limit = {
				check_variable = {
					which = wh_inheritance
					value = 6
				}
			}
			add_trait = genius
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 6
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 4.5
				}
			}
			add_trait = brilliant
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 4.5
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 3
				}
			}
			add_trait = quick
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 3
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 1.5
				}
			}
			add_trait = smart
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 2
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			add_trait = bright
		}
		# no trait
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = -2
					}
				}
				check_variable = {
					which = wh_inheritance
					value = -4
				}
			}
			add_trait = dim
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = -4
					}
				}
			}
			add_trait = dumb
		}
		# strength inheritance
		set_variable = {
			which = wh_inheritance
			value = 0
		}
		# calc father -4 to 6
		if = {
			limit = {
				father_even_if_dead = {
					trait = strong
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 3
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = tough
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = hardy
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = soft
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -1
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = fragile
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -2
			}
		}
		# calc mother
		if = {
			limit = {
				mother_even_if_dead = {
					trait = strong
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 3
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = tough
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = hardy
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = soft
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -1
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = fragile
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -2
			}
		}
		# add mutation
		random_list = {
			7 = {
				change_variable = {
					which = wh_inheritance
					value = 2
				}
			}
			18 = {
				change_variable = {
					which = wh_inheritance
					value = 1.5
				}
			}
			34 = {
				change_variable = {
					which = wh_inheritance
					value = 1
				}
			}
			49 = {
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			56 = {
				# no mutation
			}
			49 = {
				change_variable = {
					which = wh_inheritance
					value = -0.5
				}
			}
			34 = {
				change_variable = {
					which = wh_inheritance
					value = -1
				}
			}
			18 = {
				change_variable = {
					which = wh_inheritance
					value = -1.5
				}
			}
			7 = {
				change_variable = {
					which = wh_inheritance
					value = -2
				}
			}
		}
		# set trait
		if = {
			limit = {
				check_variable = {
					which = wh_inheritance
					value = 5
				}
			}
			add_trait = strong
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 5
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 3
				}
			}
			add_trait = tough
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 3
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 1
				}
			}
			add_trait = hardy
		}
		# no trait
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = -1
					}
				}
				check_variable = {
					which = wh_inheritance
					value = -3
				}
			}
			add_trait = soft
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = -3
					}
				}
			}
			add_trait = fragile
		}
		# beauty inheritance
		set_variable = {
			which = wh_inheritance
			value = 0
		}
		# calc father -4 to 6
		if = {
			limit = {
				father_even_if_dead = {
					trait = beautiful
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 3
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = pretty
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = fair
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = plain
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -1
			}
		}
		if = {
			limit = {
				father_even_if_dead = {
					trait = ugly
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -2
			}
		}

		# calc mother
		if = {
			limit = {
				mother_even_if_dead = {
					trait = beautiful
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 3
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = pretty
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 2
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = fair
				}
			}
			change_variable = {
				which = wh_inheritance
				value = 1
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = plain
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -1
			}
		}
		if = {
			limit = {
				mother_even_if_dead = {
					trait = ugly
				}
			}
			change_variable = {
				which = wh_inheritance
				value = -2
			}
		}

		# add mutation
		random_list = {
			7 = {
				change_variable = {
					which = wh_inheritance
					value = 2
				}
			}
			18 = {
				change_variable = {
					which = wh_inheritance
					value = 1.5
				}
			}
			34 = {
				change_variable = {
					which = wh_inheritance
					value = 1
				}
			}
			49 = {
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			56 = {
				# no mutation
			}
			49 = {
				change_variable = {
					which = wh_inheritance
					value = -0.5
				}
			}
			34 = {
				change_variable = {
					which = wh_inheritance
					value = -1
				}
			}
			18 = {
				change_variable = {
					which = wh_inheritance
					value = -1.5
				}
			}
			7 = {
				change_variable = {
					which = wh_inheritance
					value = -2
				}
			}
		}
		# set trait
		if = {
			limit = {
				check_variable = {
					which = wh_inheritance
					value = 5
				}
			}
			add_trait = beautiful
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 5
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 3
				}
			}
			add_trait = pretty
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = 3
					}
				}
				check_variable = {
					which = wh_inheritance
					value = 1
				}
			}
			add_trait = fair
		}
		# no trait
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = -1
					}
				}
				check_variable = {
					which = wh_inheritance
					value = -3
				}
			}
			add_trait = plain
		}
		if = {
			limit = {
				not = {
					check_variable = {
						which = wh_inheritance
						value = -3
					}
				}
			}
			add_trait = ugly
		}
		# clean
		set_variable = {
			which = wh_inheritance
			value = 0
		}
		# magic inheritance from 0 to 10
		if = {
			limit = {
				nor = {
					culture_group = beastman_group
					culture_group = daemonic_group
					culture_group = dwarf_group
					culture_group = dwarf_chaos_group
					culture_group = forest_group
					culture_group = goblin_group
					culture_group = halfling_old_world
					culture_group = halfling_lustrian
					culture_group = immortal_group
					culture_group = lahmian_group
					culture_group = lizardman_group
					culture_group = nehekharan_group
					culture_group = ogre_group
					culture_group = orc_group
					culture_group = skaven_group
				}
			}
			# calc father
			if = {
				limit = {
					father_even_if_dead = {
						or = {
							trait = magic_potential_4
							has_character_flag = magic_potential_flag_4
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 4
				}
			}
			if = {
				limit = {
					father_even_if_dead = {
						or = {
							trait = magic_potential_3
							has_character_flag = magic_potential_flag_3
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 3
				}
			}
			if = {
				limit = {
					father_even_if_dead = {
						or = {
							trait = magic_potential_2
							has_character_flag = magic_potential_flag_2
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 2
				}
			}
			if = {
				limit = {
					father_even_if_dead = {
						or = {
							trait = magic_potential_1
							has_character_flag = magic_potential_flag_1
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 1
				}
			}
			if = {
				limit = {
					father_even_if_dead = {
						has_character_flag = recessive_mage
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			# calc mather
			if = {
				limit = {
					mother_even_if_dead = {
						or = {
							trait = magic_potential_4
							has_character_flag = magic_potential_flag_4
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 5
				}
			}
			if = {
				limit = {
					mother_even_if_dead = {
						or = {
							trait = magic_potential_3
							has_character_flag = magic_potential_flag_3
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 4
				}
			}
			if = {
				limit = {
					mother_even_if_dead = {
						or = {
							trait = magic_potential_2
							has_character_flag = magic_potential_flag_2
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 3
				}
			}
			if = {
				limit = {
					mother_even_if_dead = {
						or = {
							trait = magic_potential_1
							has_character_flag = magic_potential_flag_1
						}
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 2
				}
			}
			if = {
				limit = {
					mother_even_if_dead = {
						has_character_flag = recessive_mage
					}
				}
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			if = {
				limit = {
					not = {
						check_variable = {
							which = wh_inheritance
							value = 0
						}
					}
				}
				break = yes
			}
			# religion
			if = {
				limit = {
					religion = tzeentch
				}
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			if = {
				limit = {
					religion = khorne
				}
				change_variable = {
					which = wh_inheritance
					value = -1
				}
			}
			# race
			if = {
				limit = {
					trait = creature_elf
				}
				change_variable = {
					which = wh_inheritance
					value = 0.5
				}
			}
			# add mutation
			random_list = {
				7 = {
					change_variable = {
						which = wh_inheritance
						value = 2
					}
				}
				18 = {
					change_variable = {
						which = wh_inheritance
						value = 1.5
					}
				}
				34 = {
					change_variable = {
						which = wh_inheritance
						value = 1
					}
				}
				49 = {
					change_variable = {
						which = wh_inheritance
						value = 0.5
					}
				}
				56 = {
					# no mutation
				}
				49 = {
					change_variable = {
						which = wh_inheritance
						value = -0.5
					}
				}
				34 = {
					change_variable = {
						which = wh_inheritance
						value = -1
					}
				}
				18 = {
					change_variable = {
						which = wh_inheritance
						value = -1.5
					}
				}
				7 = {
					change_variable = {
						which = wh_inheritance
						value = -2
					}
				}
			}

	# may be count magic power of parents?
			# set flag
			if = {
				limit = {
					check_variable = {
						which = wh_inheritance
						value = 8
					}
				}
				set_character_flag = magic_potential_flag_4
			}
			if = {
				limit = {
					not = {
						check_variable = {
							which = wh_inheritance
							value = 8
						}
					}
					check_variable = {
						which = wh_inheritance
						value = 6
					}
				}
				set_character_flag = magic_potential_flag_3
			}
			if = {
				limit = {
					not = {
						check_variable = {
							which = wh_inheritance
							value = 6
						}
					}
					check_variable = {
						which = wh_inheritance
						value = 4
					}
				}
				set_character_flag = magic_potential_flag_2
			}
			if = {
				limit = {
					not = {
						check_variable = {
							which = wh_inheritance
							value = 4
						}
					}
					check_variable = {
						which = wh_inheritance
						value = 2
					}
				}
				set_character_flag = magic_potential_flag_1
			}
			if = {
				limit = {
					not = {
						check_variable = {
							which = wh_inheritance
							value = 2
						}
					}
					check_variable = {
						which = wh_inheritance
						value = 1
					}
				}
				set_character_flag = recessive_mage
			}
			# clean
			set_variable = {
				which = wh_inheritance
				value = 0
			}
		}
	}
}

# Beastmen interbreeding event
character_event = {
	id = wh_inheritance.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			mother_even_if_dead = {
				trait = creature_beastman
			}
			father_even_if_dead = {
				trait = creature_beastman
			}
		}
	}

	immediate = {
		log = "work event id = wh_inheritance.2 for [Root.GetBestName]"
		remove_trait = creature_human
		remove_trait = creature_amazon
		remove_trait = creature_elf
		remove_trait = creature_dwarf
		remove_trait = creature_chaos_dwarf
		remove_trait = creature_skaven
		add_trait = creature_beastman
		if = {
			limit = {
				NOT = {
					religion_group = chaos_gods_group
				}
			}
			religion = chaos
		}
		culture = beastman_main
		set_graphical_culture = beastman_main
		if = {
			limit = {
				NOT = {
					liege = {
						trait = creature_beastman
					}
				}
			}
			liege = {
				character_event = {
					id = wh_chaos_beastmen.42
					days = 1
				}
			}
		}
	}
}

# menopause for mortal women on_five_year_pulse
character_event = {
	id = wh_inheritance.3
	hide_window = yes
	only_women = yes
	min_age = 45
	max_age = 65
	is_triggered_only = yes

	trigger = {
		immortal = no
		not = {
			trait = infertile
		}
	}

	immediate = {
		log = "work event id = wh_inheritance.3 for [Root.GetBestName]"
		if = {
			limit = {
				fertility = -1
			}
			add_trait = infertile
		}
	}
}

# Both following events are activated on_post_birth
# elven infertility - each time they get pregnant, there is a chance it is their last child they can have
character_event = {
	id = wh_inheritance.4
	desc = EVTDESCHEALTH.1				# You can feel that this will be your last child.
	picture = "GFX_evt_pregnancy"
	is_triggered_only = yes

	trigger = {
		trait = creature_elf
	}

	immediate = {
		log = "work event id = wh_inheritance.4 for [Root.GetBestName]"
		remove_trait = hard_pregnancy
	}

	option = {
		name = OK
		if = {
			limit = {
				culture_group = asur_group
			}
			random = {
				chance = 50
				if = {
					limit = {
						fertility = -1
					}
					add_trait = infertile
				}
			}
		}
		if = {
			limit = {
				culture_group = asrai_group
			}
			random = {
				chance = 40
				if = {
					limit = {
						fertility = -1
					}
					add_trait = infertile
				}
			}
		}
		if = {
			limit = {
				culture_group = druchi_group
			}
			random = {
				chance = 30
				if = {
					limit = {
						fertility = -1
					}
					add_trait = infertile
				}
			}
		}
	}
}

# dwarven infertility - with each child there is a chance of permanent infertility.At 40 % , the average number of children will be something like 2.2 or 2.3
character_event = {
	id = wh_inheritance.5
	desc = EVTDESCHEALTH.1			# You can feel that this will be your last child.
	picture = "GFX_evt_pregnancy"
	is_triggered_only = yes

	trigger = {
		OR = {
			trait = creature_dwarf
			trait = creature_chaos_dwarf
		}
		# not = {
			# trait = infertile
		# }
	}

	immediate = {
		log = "work event id = wh_inheritance.5 for [Root.GetBestName]"
		remove_trait = hard_pregnancy
	}

	option = {
		name = OK
		random = {
			chance = 45
			if = {
				limit = {
					fertility = -1
				}
				add_trait = infertile
			}
		}
	}
}

# fires for the kid, pings to the mother
character_event = {
	id = wh_inheritance.6
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			mother = {
				OR = {
					trait = creature_elf
					trait = creature_dwarf
					trait = creature_chaos_dwarf

				}
				NOT = {
					trait = infertile
				}
			}
			father = {
				age = 200
				trait = creature_elf
				NOT = {
					trait = infertile
				}
			}
		}
	}

	immediate = {
		log = "work event id = wh_inheritance.6 for [Root.GetBestName]"
		if = {
			limit = {
				mother = {
					trait = creature_elf
				}
			}
			mother = {
				character_event = {
					id = wh_inheritance.4
					days = 2
				}
			}
		}
		if = {
			limit = {
				father = {
					trait = creature_elf
					age = 200
				}
			}
			father = {
				character_event = {
					id = wh_inheritance.7
					days = 2
				}
			}
		}
		if = {
			limit = {
				father = {
					OR = {
						trait = creature_dwarf
						trait = creature_chaos_dwarf
					}
					age = 120
				}
			}
			father = {
				character_event = {
					id = wh_inheritance.8
					days = 2
				}
			}
		}
		if = {
			limit = {
				mother = {
					OR = {
						trait = creature_dwarf
						trait = creature_chaos_dwarf
					}
				}
			}
			mother = {
				character_event = {
					id = wh_inheritance.5
					days = 2
				}
			}
		}
	}
}

# elven infertility - male elves are no longer excluded
character_event = {
	id = wh_inheritance.7
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		trait = creature_elf
	}

	immediate = {
		log = "work event id = wh_inheritance.7 for [Root.GetBestName]"
		random_list = {
			10 = {
				modifier = {
					factor = 5
					culture_group = asur_group
				}
				modifier = {
					factor = 6
					culture_group = asrai_group
				}
				modifier = {
					factor = 7
					culture_group = druchi_group
				}
				modifier = {
					factor = 0.75
					age = 500
				}
				modifier = {
					factor = 0.75
					age = 750
				}
				modifier = {
					factor = 0.75
					age = 1000
				}
				modifier = {
					factor = 0.25
					age = 1500
				}
				modifier = {
					factor = 0.75
					trait = incapable
				}
				modifier = {
					factor = 0.75
					trait = burnt_by_asuryan
				}
				modifier = {
					factor = 0.75
					trait = infirm
				}
				modifier = {
					factor = 0.75
					trait = mutation_minor
				}
				modifier = {
					factor = 0.75
					trait = mutation_major
				}
				modifier = {
					factor = 0.5
					trait = mutation_massive
				}
			}
			50 = {
				if = {
					limit = {
						fertility = -1
					}
					add_trait = infertile
				}
			}
		}
	}
}

# dwarven infertility - male dwarves are no longer excluded
character_event = {
	id = wh_inheritance.8
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			trait = creature_dwarf
			trait = creature_chaos_dwarf
		}
	}

	immediate = {
		log = "work event id = wh_inheritance.8 for [Root.GetBestName]"
		random_list = {
			60 = {
 				modifier = {
					factor = 0.75
					age = 150
				}
 				modifier = {
					factor = 0.75
					age = 200
				}
 				modifier = {
					factor = 0.75
					age = 250
				}
 				modifier = {
					factor = 0.25
					age = 300
				}
 				modifier = {
					factor = 0.75
					trait = incapable
				}
 				modifier = {
					factor = 0.75
					trait = infirm
				}
 				modifier = {
					factor = 0.75
					trait = mutation_minor
				}
 				modifier = {
					factor = 0.75
					trait = mutation_major
				}
 				modifier = {
					factor = 0.5
					trait = mutation_massive
				}
			}
			40 = {
				if = {
					limit = {
						fertility = -1
					}
					add_trait = infertile
				}
			}
		}
	}
}

# send lahmian_queen trait to heir on_death
character_event = {
	id = wh_inheritance.9
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		trait = lahmian_queen
	}

	immediate = {
		log = "work event id = wh_inheritance.9 for [Root.GetBestName]"
		if = {
			limit = {
				current_heir = {
					dynasty = ROOT
					is_female = yes
					is_alive = yes
					NOT = {
						trait = lahmian_queen
					}
				}
			}
			current_heir = {
				add_trait = lahmian_queen
			}
			break = yes
		}
		if = {
			limit = {
				any_child = {
					is_alive = yes
					is_female = yes
					NOT = {
						trait = lahmian_queen
					}
				}
			}
			random_child = {
				limit = {
					is_alive = yes
					is_female = yes
					NOT = {
						trait = lahmian_queen
					}
				}
				add_trait = lahmian_queen
			}
			break = yes
		}
		if = {
			limit = {
				any_dynasty_member = {
					is_alive = yes
					is_female = yes
					NOT = {
						trait = lahmian_queen
					}
				}
			}
			random_dynasty_member = {
				limit = {
					is_alive = yes
					is_female = yes
					NOT = {
						trait = lahmian_queen
					}
				}
				add_trait = lahmian_queen
			}
			break = yes
		}
	}
}
