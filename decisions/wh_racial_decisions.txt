#
# Those decisions are used for enforcing racial system

decisions = {

	ai_race_trait_check = {
		potential = {
			#ai = yes
			is_demon_trigger = no
			nor = {
				trait = creature_human
				trait = creature_amazon
				trait = creature_elf
				trait = creature_dwarf
				trait = creature_chaos_dwarf
				trait = creature_halfling
				trait = creature_orc
				trait = creature_goblin
				trait = creature_snotling
				trait = creature_nehekharan
				trait = creature_skink
				trait = creature_saurus
				trait = creature_slann
				trait = creature_skaven
				trait = creature_forestspirit
				trait = creature_treekin
				trait = creature_beastman
				trait = creature_ogre
				trait = creature_chaosspawn
				trait = vampire_carstein_visible
				trait = vampire_lahmian_visible
				trait = creature_celdragon
			}
		}
		allow = {
		}
		effect = {
			log = "work decision ai_race_trait_check for [Root.GetBestName]"
			character_event = {
				id = wh_maintenance.51
			}
		}
		ai_will_do = {
			factor = 1
		}
	}
	# Lizardmen
	# ai_dynasty_lizardman = {
	# potential = {
	# ai = yes
	# OR = {
	# trait = creature_amazon
	# graphical_culture = lizardmangfx
	# }
	# dynasty = 0
	# }
	# allow = {
	# always = no
	# }
	# effect = {
	# log = "work decision ai_dynasty_lizardman [This.GetBestName]"
	# any_spouse = {
	# remove_spouse = ROOT
	# }
	# character_event = {
	# id = slizardmen.81
	# }
	# }
	# ai_will_do = {
	# factor = 1
	# }
	# }
	ai_intermarriage_fix = {
		potential = {
			ai = yes
			spouse = {
				is_alive = yes
			}
			OR = {
				spouse = {
					cannot_marry_race_trigger = yes
				}
				nor = {
					AND = {
						spouse = { ai = no }
						has_global_flag = optionB
					}
					# beastmen can hybridize with everyone else
					spouse = {
						trait = creature_beastman
					}
					trait = creature_beastman
					# human
					and = {
						spouse = {
							trait = creature_human
						}
						trait = creature_human
					}
					# elf
					and = {
						spouse = {
							trait = creature_elf
						}
						trait = creature_elf
					}
					# dwarf
					and = {
						spouse = {
							or = {
								trait = creature_dwarf
								trait = creature_chaos_dwarf
							}
						}
						or = {
							trait = creature_dwarf
							trait = creature_chaos_dwarf
						}
					}
					# halfling
					and = {
						spouse = {
							trait = creature_halfling
						}
						trait = creature_halfling
					}
					# ogre
					and = {
						spouse = {
							trait = creature_ogre
						}
						trait = creature_ogre
					}
				}
			}
		}
		allow = {
		}
		effect = {
			log = "work decision ai_intermarriage_fix for [Root.GetBestName]"
			any_spouse = {
				remove_spouse = ROOT
			}
		}
		ai_will_do = {
			factor = 1
		}
	}
	# Intermarriage fix
	ai_intermarriage_fix_elf = {
		potential = {
			ai = yes
			trait = creature_elf
			NOR = {
				trait = elven_scion
				trait = elven_maiden
			}
			age = 12
			NOT = {
				age = 45
			}
			is_married = no
		}
		allow = {
		}
		effect = {
			log = "work decision ai_intermarriage_fix_elf for [Root.GetBestName]"
			if = {
				limit = {
					is_female = yes
				}
				add_trait = elven_maiden
			}
			if = {
				limit = {
					is_female = no
				}
				add_trait = elven_scion
			}
		}
		ai_will_do = {
			factor = 1
		}
	}
}
