# amazons, lizardmen

decisions = {

	hold_fertility_ritual = {
		is_high_prio = yes
		only_playable = yes
		potential = {
			age = 16
			religion = amazon
			trait = creature_amazon
			is_female = yes
			higher_tier_than = BARON
		}
		allow = {
			wealth = 25
			month = 4
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
			nor = {
				month = 6
				trait = pregnant
				trait = disinherited_amazon
				trait = questing
				has_character_flag = holding_amazon_ritual
			}
			war = no
			any_courtier = {
				is_female = no
				age = 16
				OR = {
					NOT = {
						age = 45
					}
					is_immortal_trigger = yes
				}
				OR = {
					custom_tooltip = {
						text = AMAZON_EXC_REQUIREMENT
						has_character_flag = amazon_exception
					}
					trait = in_stock
				}
			}
		}
		effect = {
			ROOT = {
				character_event = {
					id = amazon.8
				}
				hidden_tooltip = {
					set_variable = {
						which = "eating_count" value = 0
					}
					set_variable = {
						which = "drinking_count" value = 0
					}
				}
			}
			any_courtier = {
				hidden_tooltip = {
					set_variable = {
						which = "eating_count" value = 0
					}
					set_variable = {
						which = "drinking_count" value = 0
					}
				}
			}
		}
		ai_will_do = {
			factor = 5
		}
	}

	free_stock_slaves = {
		is_high_prio = yes
		only_playable = yes
		potential = {
			NOT = {
				trait = creature_amazon
			}
			OR = {
				trait = in_stock
				any_vassal = {
					trait = in_stock
				}
				any_courtier = {
					trait = in_stock
				}
			}
			OR = {
				independent = yes
				top_liege = {
					NOT = {
						trait = creature_amazon
					}
				}
			}
		}
		allow = {
			NOT = {
				trait = creature_amazon
			}
			OR = {
				trait = in_stock
				any_vassal = {
					trait = in_stock
				}
				any_courtier = {
					trait = in_stock
				}
			}
			OR = {
				independent = yes
				top_liege = {
					NOT = {
						trait = creature_amazon
					}
				}
			}
		}
		effect = {
			remove_trait = in_stock
			any_vassal = {
				remove_trait = in_stock
			}
			any_courtier = {
				remove_trait = in_stock
			}
		}
		ai_will_do = {
			factor = 5
		}
	}

	awaken_slann = {
		is_high_prio = yes
		only_playable = yes
		only_independent = yes
		potential = {
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
			# think about it
			ai = no
			trait = creature_skink
			war = yes
			or = {
				is_primary_war_defender = yes
				is_primary_war_attacker = yes
			}
			# any_war = {
			# 	OR = {
			# 		any_defender = {
			# 			character = ROOT
			# 			is_primary_war_defender = yes
			# 		}
			# 		any_attacker = {
			# 			character = ROOT
			# 			is_primary_war_attacker = yes
			# 		}
			# 	}
			# }
			nor = {
				has_character_modifier = wakeslann_cooldown
				trait = defective
			}
			any_vassal = {
				trait = creature_slann
				trait = lizardman_sleepingslann
			}
		}
		allow = {
			piety = 400
			NOT = {
				decadence = 75
			}
		}
		effect = {
			piety = -300
			decadence = 2
			hidden_tooltip = {
				add_character_modifier = {
					name = wakeslann_cooldown
					hidden = yes
					duration = 900
				}
				random_vassal = {
					limit = {
						trait = creature_slann
						trait = lizardman_sleepingslann
					}
					character_event = {
						id = slizardmen.34
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}

	amazon_brawling_tournament = {
		is_high_prio = yes
		only_playable = yes
		potential = {
			trait = creature_amazon
			higher_tier_than = COUNT
			is_female = yes
			NOT = {
				trait = disinherited_amazon
			}
			war = no
			OR = {
				NOT = {
					age = 45
				}
				is_immortal_trigger = yes
			}
			nor = {
				has_character_flag = brawling_participant
				has_character_modifier = am_brawling_cooldown
				trait = pregnant
			}
			OR = {
				any_courtier = {
					trait = creature_amazon
					prisoner = no
					nor = {
						has_character_flag = brawling_participant
						trait = disinherited
						trait = disinherited_amazon
						trait = pregnant
					}
					custom_tooltip = {
						text = IS_NOT_INCAPACITATED
						is_incapacitated_trigger = no
					}
					age = 16
					OR = {
						NOT = {
							age = 45
						}
						is_immortal_trigger = yes
					}
					count = 2
				}
				any_vassal = {
					trait = creature_amazon
					prisoner = no
					age = 16
					has_character_flag = brawling_participant
					nor = {
						trait = disinherited
						trait = disinherited_amazon
						trait = pregnant
					}
					custom_tooltip = {
						text = IS_NOT_INCAPACITATED
						is_incapacitated_trigger = no
					}
					OR = {
						NOT = {
							age = 45
						}
						is_immortal_trigger = yes
					}
					count = 2
				}
			}
		}
		allow = {
			prestige = 150
			wealth = 50
			independent = yes
			war = no
			prisoner = no
			month = 6
			NOT = {
				month = 11
			}
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
		}
		effect = {
			prestige = -150
			wealth = -50
			decadence = -5
			hidden_tooltip = {
				set_variable = {
					which = "brawl_player"
					value = 0
				}
				set_character_flag = brawling_participant
				set_character_flag = brawling_host
				set_character_flag = do_not_disturb
				clr_character_flag = am_fight_1
				clr_character_flag = am_fight_2
				clr_character_flag = am_fight_3
				clr_character_flag = am_fight_4
				clr_character_flag = am_fight_5
				clr_character_flag = am_fight_6
				clr_character_flag = am_fight_7
				clr_character_flag = am_fight_8
				clr_character_flag = am_fight_9
				clr_character_flag = am_fight_10
				clr_character_flag = am_fight_11
				diplomatic_immunity = yes
				character_event = {
					id = slizardmen.61
				}
				character_event = {
					id = slizardmen.61900 days = 30
				}
				add_character_modifier = {
					name = am_brawling_cooldown
					hidden = yes
					duration = 1200
				}
				any_vassal = {
					limit = {
						trait = creature_amazon
						nor = {
							has_character_flag = brawling_participant
							trait = disinherited
							trait = disinherited_amazon
							trait = pregnant
						}
						custom_tooltip = {
							text = IS_NOT_INCAPACITATED
							is_incapacitated_trigger = no
						}
						age = 16
						OR = {
							NOT = {
								age = 45
							}
							is_immortal_trigger = yes
						}
					}
					letter_event = {
						id = slizardmen.61001 days = 2 random = 5
					}
					set_character_flag = do_not_disturb
					diplomatic_immunity = yes
					character_event = {
						id = slizardmen.61900 days = 30
					}
				}
				any_courtier = {
					limit = {
						trait = creature_amazon
						prisoner = no
						is_ruler = no
						age = 16
						nor = {
							has_character_flag = brawling_participant
							trait = disinherited
							trait = disinherited_amazon
							trait = pregnant
						}
						custom_tooltip = {
							text = IS_NOT_INCAPACITATED
							is_incapacitated_trigger = no
						}
						OR = {
							NOT = {
								age = 45
							}
							is_immortal_trigger = yes
						}
					}
					letter_event = {
						id = slizardmen.61001 days = 2 random = 5
					}
					set_character_flag = do_not_disturb
					diplomatic_immunity = yes
					character_event = {
						id = slizardmen.61900 days = 30
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.1
			}
			modifier = {
				factor = 1.5
				trait = brave
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 0.15
				trait = craven
			}
			modifier = {
				factor = 0
				trait = maimed
			}
			modifier = {
				factor = 0
				trait = wounded
			}
		}
	}

	search_youth_fountain = {
		is_high_prio = yes
		only_playable = yes
		potential = {
			OR = {
				trait = creature_amazon
				trait = creature_skink
				trait = creature_human
			}
			war = no
			capital_scope = {
				region = world_new_world_lustria
			}
			is_immortal_trigger = no
			nor = {
				has_character_flag = searching_the_fountain
				trait = pregnant
			}
		}
		allow = {
			prestige = 50
			wealth = 450
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
		}
		effect = {
			prestige = -50
			wealth = -450
			if = {
				limit = {
					trait = creature_skink
				}
				decadence = 4
			}
			hidden_tooltip = {
				character_event = {
					id = slizardmen.70
				}
				set_character_flag = searching_the_fountain
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.001
			}
			modifier = {
				factor = 1.5
				trait = brave
			}
			modifier = {
				factor = 1.5
				trait = wroth
			}
			modifier = {
				factor = 2.5
				trait = ambitious
			}
			modifier = {
				factor = 0.15
				trait = craven
			}
			modifier = {
				factor = 0
				trait = maimed
			}
			modifier = {
				factor = 0
				trait = wounded
			}
		}
	}
}

targetted_decisions = {

	# think about it
	# give_province_lizardmen_1 = {
	# 	filter = realm
	# 	ai_target_filter = self
	# 	from_potential = {
	# 		ai = no
	# 		always = no #OBSOLETE
	# 		trait = creature_skink
	# 		is_ruler = yes
	# 		NOR = {
	# 			any_vassal = {
	# 				has_character_modifier = tagged_recipient
	# 			}
	# 			any_courtier = {
	# 				has_character_modifier = tagged_recipient
	# 			}
	# 		}
	# 	}
	# 	potential = {
	# 		trait = creature_skink
	# 		always = no #OBSOLETE
	# 		NOT = {
	# 			character = FROM
	# 		}
	# 		liege = {
	# 			character = FROM
	# 		}
	# 		custom_tooltip = {
	# 			text = IS_NOT_INCAPACITATED
	# 			is_incapacitated_trigger = no
	# 		}
	# 		from = {
	# 			custom_tooltip = {
	# 				text = IS_NOT_INCAPACITATED
	# 				is_incapacitated_trigger = no
	# 			}
	# 		}
	# 		nor = {
	# 			trait = disinherited_amazon
	# 			trait = disinherited
	# 		}
	# 	}
	# 	allow = {
	# 		FROM = {
	# 			any_demesne_title = {
	# 				can_be_given_away = yes
	# 			}
	# 		}
	# 	}
	# 	effect = {
	# 		add_character_modifier =  {
	# 			name = tagged_recipient
	# 			duration = 30
	# 		}
	# 	}
	# 	revoke_allowed = {
	# 		always = no
	# 	}
	# 	ai_will_do = {
	# 		factor = 0
	# 	}
	# }

	# think about it
	give_province_amazon_1 = {
		filter = realm
		ai_target_filter = self
		from_potential = {
			ai = no
			trait = creature_amazon
			is_ruler = yes
			NOR = {
				any_vassal = {
					has_character_modifier = tagged_recipient
				}
				any_courtier = {
					has_character_modifier = tagged_recipient
				}
			}
		}
		potential = {
			trait = creature_amazon
			NOT = {
				character = FROM
			}
			liege = {
				character = FROM
			}
			nor = {
				trait = disinherited_amazon
				trait = disinherited
			}
		}
		allow = {
			FROM = {
				any_demesne_title = {
					can_be_given_away = yes
				}
			}
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
			from = {
				custom_tooltip = {
					text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no
				}
			}
		}
		effect = {
			add_character_modifier =  {
				name = tagged_recipient
				hidden = yes
				duration = 30
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}

	# Amazon - Exile complacent Amazon
	exile_complacent_amazon = {
		filter = dynasty
		ai_target_filter = dynasty
		is_high_prio = yes
		only_rulers = yes
		# hide_in_decisions_list = yes # This decision is shown in the Religion View for each complacent character
		from_potential = {
			is_ruler = yes
			religion = amazon
		}
		potential = {
			is_female = yes
			prisoner = no
			dynasty = FROM
			trait = complacent
			NOT = {
				trait = disinherited
			}
			has_regent = no
			OR = {
				is_ruler = no
				liege = {
					character = FROM
				}
			}
		}
		allow = {
			FROM = {
				piety = 100
				NOT = {
					trait = complacent
				}
				custom_tooltip = {
					text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no
				}
			}
		}
		effect = {
			character_event = {
				id = slizardmen.44101
			}
			FROM = {
				piety = -100
				decadence = -3
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				any_dynasty_member = {
					ai = no
					higher_tier_than = ROOT
					same_realm = ROOT
				}
			}
		}
	}

	#Decision to eat prisoners for the Miyan
	eat_prisoner_miyan = {
		only_rulers = yes
		from_potential = {
			religion = kukaili
			primary_title = {
				higher_tier_than = BARON
			}
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
			age = 16
		}
		potential = {
			prisoner = yes
			host = {
				character = FROM
			}
			nor = {
				trait = khemri_tomb_king
				character = FROM
			}
		}
		allow = {
			prisoner = yes
			from = {
				custom_tooltip = {
					text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no
				}
			}
		}
		effect = {
			hidden_tooltip = {
				FROM = {
					character_event = {
						id = DR_misc.500
					}
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.25
			}
			modifier = {
				factor = 0.4
				reverse_opinion = {
					who = FROM value = 20
				}
			}
			modifier = {
				factor = 0.25
				reverse_opinion = {
					who = FROM value = 40
				}
			}
			modifier = {
				factor = 5
				NOT = {
					reverse_opinion = {
						who = FROM value = -25
					}
				}
			}
			modifier = {
				factor = 0
				FROM = {
					war = yes
				}
			}
			modifier = {
				factor = 1.5
				trait = gluttonous
			}
			modifier = {
				factor = 0.75
				prestige = 200
			}
			modifier = {
				factor = 0.05
				prestige = 1000
			}
			modifier = {
				factor = 0
				FROM = {
					trait = kind
				}
			}
			modifier = {
				factor = 2
				ROOT = {
					trait = cruel
				}
			}
		}
	}
}

title_decisions = {

	# give_province_lizardmen_2 = {
	# 	filter = owned
	# 	ai_target_filter = owned
	# 	potential = {
	# 		can_be_given_away = yes
	# 		always = no #OBSOLETE
	# 		FROM = {
	# 			culture_group = lizardman_group
	# 			demesne_size = 2
	# 		}
	# 		holder_scope = {
	# 			always = no #OBSOLETE
	# 			character = FROM
	# 			ai = no
	# 		}
	# 	}
	# 	allow = {
	# 		FROM = {
	# 			OR = {
	# 				any_vassal = {
	# 					has_character_modifier = tagged_recipient
	# 				}
	# 				any_courtier = {
	# 					has_character_modifier = tagged_recipient
	# 				}
	# 			}
	# 		}
	# 	}
	# 	effect = {
	# 		if = {
	# 			limit = {
	# 				FROM = {
	# 					any_vassal = {
	# 						has_character_modifier = tagged_recipient
	# 					}
	# 				}
	# 			}
	# 			FROM = {
	# 				any_vassal = {
	# 					limit = {
	# 						has_character_modifier = tagged_recipient
	# 					}
	# 					ROOT = {
	# 						grant_title = PREV
	# 						set_government_type = lizardmen_government
	# 						if = {
	# 							limit = {
	# 								higher_tier_than = COUNT
	# 							}
	# 							add_law = agnatic_succession
	# 							add_law = succ_open_elective
	# 						}
	# 					}
	# 					remove_character_modifier = tagged_recipient
	# 				}
	# 			}
	# 			break = yes
	# 		}
	# 		if = {
	# 			limit = {
	# 				FROM = {
	# 					any_courtier = {
	# 						has_character_modifier = tagged_recipient
	# 					}
	# 				}
	# 			}
	# 			FROM = {
	# 				any_courtier = {
	# 					limit = {
	# 						has_character_modifier = tagged_recipient
	# 					}
	# 					ROOT = {
	# 						grant_title = PREV
	# 						set_government_type = lizardmen_government
	# 						if = {
	# 							limit = {
	# 								higher_tier_than = COUNT
	# 							}
	# 							add_law = agnatic_succession
	# 							add_law = succ_open_elective
	# 						}
	# 					}
	# 					remove_character_modifier = tagged_recipient
	# 				}
	# 			}
	# 			break = yes
	# 		}
	# 	}
	# 	revoke_allowed = {
	# 		always = no
	# 	}
	# 	ai_will_do = {
	# 		factor = 0
	# 	}
	# }

	give_province_amazon_2 = {
		filter = owned
		ai_target_filter = owned
		potential = {
			can_be_given_away = yes
			FROM = {
				trait = creature_amazon
				demesne_size = 2
			}
			holder_scope = {
				character = FROM
				ai = no
			}
		}
		allow = {
			FROM = {
				OR = {
					any_vassal = {
						has_character_modifier = tagged_recipient
					}
					any_courtier = {
						has_character_modifier = tagged_recipient
					}
				}
			}
		}
		effect = {
			if = {
				limit = {
					FROM = {
						any_vassal = {
							has_character_modifier = tagged_recipient
						}
					}
				}
				FROM = {
					any_vassal = {
						limit = {
							has_character_modifier = tagged_recipient
						}
						ROOT = {
							grant_title = PREV
							if = {
								limit = {
									higher_tier_than = COUNT
								}
								add_law = enatic_succession
							}
						}
						remove_character_modifier = tagged_recipient
					}
				}
				break = yes
			}
			if = {
				limit = {
					FROM = {
						any_courtier = {
							has_character_modifier = tagged_recipient
						}
					}
				}
				FROM = {
					any_courtier = {
						limit = {
							has_character_modifier = tagged_recipient
						}
						ROOT = {
							grant_title = PREV
							if = {
								limit = {
									higher_tier_than = COUNT
								}
								add_law = enatic_succession
							}
						}
						remove_character_modifier = tagged_recipient
					}
				}
				break = yes
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}

	# give_province_lizardmen_ai = {
	# 	filter = owned
	# 	ai_target_filter = owned
	# 	potential = {
	# 		can_be_given_away = yes
	# 		always = no #OBSOLETE
	# 		FROM = {
	# 			culture_group = lizardman_group
	# 			demesne_size = 2
	# 		}
	# 		holder_scope = {
	# 			always = no #OBSOLETE
	# 			character = FROM
	# 			ai = yes
	# 			OR = {
	# 				any_courtier = {
	# 					is_female = no
	# 					prisoner = no
	# 					NOT = {
	# 						character = FROM
	# 					}
	# 					NOT = {
	# 						trait = disinherited_amazon
	# 					}
	# 					NOT = {
	# 						trait = disinherited
	# 					}
	# 					trait = creature_skink
	# 				}
	# 				any_vassal = {
	# 					is_female = no
	# 					prisoner = no
	# 					NOT = {
	# 						character = FROM
	# 					}
	# 					NOT = {
	# 						trait = disinherited_amazon
	# 					}
	# 					NOT = {
	# 						trait = disinherited
	# 					}
	# 					trait = creature_skink
	# 				}
	# 			}
	# 		}
	# 		tier = COUNT
	# 		is_capital = no
	# 	}
	# 	allow = {
	# 		always = yes
	# 	}
	# 	effect = {
	# 		FROM = {
	# 			if = {
	# 				limit = {
	# 					FROM = {
	# 						any_vassal = {
	# 							is_female = no
	# 							prisoner = no
	# 							NOT = {
	# 								character = FROM
	# 							}
	# 							NOT = {
	# 								trait = disinherited_amazon
	# 							}
	# 							NOT = {
	# 								trait = disinherited
	# 							}
	# 							trait = creature_skink
	# 						}
	# 					}
	# 				}
	# 				FROM = {
	# 					any_vassal = {
	# 						limit = {
	# 							is_female = no
	# 							prisoner = no
	# 							NOT = {
	# 								character = FROM
	# 							}
	# 							NOT = {
	# 								trait = disinherited_amazon
	# 							}
	# 							NOT = {
	# 								trait = disinherited
	# 							}
	# 							trait = creature_skink
	# 						}
	# 						ROOT = {
	# 							grant_title = PREV
	# 							if = {
	# 								limit = {
	# 									higher_tier_than = COUNT
	# 								}
	# 								add_law = succ_appointment
	# 							}
	# 						}
	# 						clr_character_flag = tagged_recipient
	# 					}
	# 				}
	# 				break = yes
	# 			}
	# 			if = {
	# 				limit = {
	# 					FROM = {
	# 						any_courtier = {
	# 							is_female = no
	# 							prisoner = no
	# 							NOT = {
	# 								character = FROM
	# 							}
	# 							NOT = {
	# 								trait = disinherited_amazon
	# 							}
	# 							NOT = {
	# 								trait = disinherited
	# 							}
	# 							trait = creature_skink
	# 						}
	# 					}
	# 				}
	# 				FROM = {
	# 					any_courtier = {
	# 						limit = {
	# 							is_female = no
	# 							prisoner = no
	# 							NOT = {
	# 								character = FROM
	# 							}
	# 							NOT = {
	# 								trait = disinherited_amazon
	# 							}
	# 							NOT = {
	# 								trait = disinherited
	# 							}
	# 							trait = creature_skink
	# 						}
	# 						ROOT = {
	# 							grant_title = PREV
	# 							if = {
	# 								limit = {
	# 									higher_tier_than = COUNT
	# 								}
	# 								add_law = succ_appointment
	# 							}
	# 						}
	# 						clr_character_flag = tagged_recipient
	# 					}
	# 				}
	# 				break = yes
	# 			}
	# 		}
	# 	}
	# 	revoke_allowed = {
	# 		always = no
	# 	}
	# 	ai_will_do = {
	# 		factor = 1
	# 		modifier = {
	# 			factor = 0.5
	# 			FROM = {
	# 				trait = greedy
	# 			}
	# 		}
	# 		modifier = {
	# 			factor = 0
	# 			FROM = {
	# 				NOT = {
	# 					over_max_demesne_size = 1
	# 				}
	# 			}
	# 		}
	# 		modifier = {
	# 			factor = 0
	# 			FROM = {
	# 				NOT = {
	# 					any_demesne_title = {
	# 						tier = DUKE
	# 						count = 3
	# 					}
	# 				}
	# 			}
	# 			ROOT = {
	# 				tier = DUKE
	# 			}
	# 		}
	# 	}
	# }

	give_province_amazon_ai = {
		filter = owned
		ai_target_filter = owned
		potential = {
			can_be_given_away = yes
			FROM = {
				trait = creature_amazon
				demesne_size = 2
			}
			holder_scope = {
				character = FROM
				ai = yes
				OR = {
					any_courtier = {
						is_female = yes
						prisoner = no
						NOT = {
							character = FROM
						}
						NOT = {
							trait = disinherited_amazon
						}
						NOT = {
							trait = disinherited
						}
						trait = creature_amazon
					}
					any_vassal = {
						is_female = yes
						prisoner = no
						NOT = {
							character = FROM
						}
						NOT = {
							trait = disinherited
						}
						NOT = {
							trait = disinherited_amazon
						}
						trait = creature_amazon
					}
				}
			}
			tier = COUNT
			is_capital = no
		}
		allow = {
			always = yes
		}
		effect = {
			FROM = {
				if = {
					limit = {
						FROM = {
							any_vassal = {
								is_female = yes
								prisoner = no
								NOT = {
									character = FROM
								}
								NOT = {
									trait = disinherited
								}
								NOT = {
									trait = disinherited_amazon
								}
								trait = creature_amazon
							}
						}
					}
					FROM = {
						any_vassal = {
							limit = {
								is_female = yes
								prisoner = no
								NOT = {
									character = FROM
								}
								NOT = {
									trait = disinherited
								}
								NOT = {
									trait = disinherited_amazon
								}
								trait = creature_amazon
							}
							ROOT = {
								grant_title = PREV
								if = {
									limit = {
										higher_tier_than = COUNT
									}
									add_law = enatic_succession
								}
							}
							clr_character_flag = tagged_recipient
						}
					}
					break = yes
				}
				if = {
					limit = {
						FROM = {
							any_courtier = {
								is_female = yes
								prisoner = no
								NOT = {
									character = FROM
								}
								NOT = {
									trait = disinherited
								}
								NOT = {
									trait = disinherited_amazon
								}
								trait = creature_amazon
							}
						}
					}
					FROM = {
						any_courtier = {
							limit = {
								is_female = yes
								prisoner = no
								NOT = {
									character = FROM
								}
								NOT = {
									trait = disinherited
								}
								NOT = {
									trait = disinherited_amazon
								}
								trait = creature_amazon
							}
							ROOT = {
								grant_title = PREV
								if = {
									limit = {
										higher_tier_than = COUNT
									}
									add_law = enatic_succession
								}
							}
							clr_character_flag = tagged_recipient
						}
					}
					break = yes
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.5
				FROM = {
					trait = greedy
				}
			}
			modifier = {
				factor = 0
				NOT = {
					over_max_demesne_size = 1
				}
			}
			modifier = {
				factor = 0
				FROM = {
					NOT = {
						any_demesne_title = {
							tier = DUKE
							count = 3
						}
					}
				}
				ROOT = {
					tier = DUKE
				}
			}
		}
	}
}

plot_decisions = {

	faction_misaligned_chief_ultimatum = {
		is_high_prio = yes
		potential = {
			leads_faction = faction_misaligned_chief
			OR = {
				NOT = {
					has_character_flag = faction_misaligned_chief_ultimatum_taken
				}
				had_character_flag = {
					flag = faction_misaligned_chief_ultimatum_taken
					days = 7
				}
			}
		}
		allow = {
			war = no
			prisoner = no
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
			liege = {
				nor = {
					war_with = ROOT
					reverse_has_truce = ROOT
				}
			}
			capital_holding = {
				controller = {
					character = ROOT
				}
			}
		}
		effect = {
			liege = {
				letter_event = {
					id = slizardmen.3 days = 3
				}
			}
			hidden_tooltip = {
				set_character_flag = faction_misaligned_chief_ultimatum_taken
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.5 # Slow it down a little
			}
			modifier = {
				factor = 2.5
				liege = {
					trait = defective
				}
			}
			modifier = {
				factor = 0
				NOT = {
					faction_power =
					{
						faction = faction_misaligned_chief
						power = 0.75
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power =
					{
						faction = faction_misaligned_chief
						power = 1.0
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power =
					{
						faction = faction_misaligned_chief
						power = 1.5
					}
				}
			}
			modifier = {
				factor = 0
				liege = {
					any_war = {
						OR = {
							AND = {
								defender = {
									character = PREV
								}
								nor = {
									using_cb = depose_liege
									using_cb = overthrow_ruler
									using_cb = overthrow_ruler_no_calls
								}
							}
							AND = {
								attacker = {
									character = PREV
								}
								OR = {
									using_cb = invasion
									using_cb = religious
									using_cb = tribal_invasion
									# using_cb = viking_invasion
									using_cb = claim_all
									using_cb = claim
									using_cb = other_claim
								}
							}
						}
					}
				}
			}
		}
	}

	faction_complacent_queen_ultimatum = {
		is_high_prio = yes
		potential = {
			leads_faction = faction_complacent_queen
			OR = {
				NOT = {
					has_character_flag = faction_complacent_queen_ultimatum_taken
				}
				had_character_flag = {
					flag = faction_complacent_queen_ultimatum_taken days = 7
				}
			}
		}
		allow = {
			war = no
			prisoner = no
			custom_tooltip = {
				text = IS_NOT_INCAPACITATED
				is_incapacitated_trigger = no
			}
			liege = {
				nor = {
					war_with = ROOT
					reverse_has_truce = ROOT
				}
			}
			capital_holding = {
				controller = {
					character = ROOT
				}
			}
		}
		effect = {
			liege = {
				letter_event = {
					id = slizardmen.45 days = 3
				}
			}
			hidden_tooltip = {
				set_character_flag = faction_complacent_queen_ultimatum_taken
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.5 # Slow it down a little
			}
			modifier = {
				factor = 2.5
				liege = {
					trait = defective
				}
			}
			modifier = {
				factor = 0
				NOT = {
					faction_power =
					{
						faction = faction_misaligned_chief
						power = 0.75
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power =
					{
						faction = faction_misaligned_chief
						power = 1.0
					}
				}
			}
			modifier = {
				factor = 0.1
				NOT = {
					faction_power =
					{
						faction = faction_misaligned_chief
						power = 1.5
					}
				}
			}
			modifier = {
				factor = 0
				liege = {
					any_war = {
						OR = {
							AND = {
								defender = {
									character = PREV
								}
								NOT = {
									using_cb = depose_liege
								}
								NOT = {
									using_cb = overthrow_ruler
								}
								NOT = {
									using_cb = overthrow_ruler_no_calls
								}
							}
							AND = {
								attacker = {
									character = PREV
								}
								OR = {
									using_cb = invasion
									using_cb = religious
									using_cb = tribal_invasion
									# using_cb = viking_invasion
									using_cb = claim_all
									using_cb = claim
									using_cb = other_claim
								}
							}
						}
					}
				}
			}
		}
	}
}

settlement_decisions  = {

	cutback_jungle_decision = {
		filter = realm_owned
		ai_target_filter = owned
		from_potential = {
			ai = no # Handled by event
		}
		potential = {
			is_capital = yes
			location = {
				has_province_modifier = lustria_jungle
			}
			OR = {
				holder_scope = {
					any_liege = {
						character = FROM
					}
				}
				holder_scope = {
					character = FROM
				}
			}
		}
		allow = {
			FROM = {
				wealth = 25
			}
			location = {
				NOT = {
					has_province_modifier = recent_cutback
				}
				OR = {
					has_province_modifier = lustria_medium_jungle
					has_province_modifier = lustria_dense_jungle
					has_province_modifier = lustria_oppressive_jungle
				}
			}
			OR = {
				FROM = {
					in_command = no
					custom_tooltip = {
						text = IS_NOT_INCAPACITATED
						is_incapacitated_trigger = no
					}
				}
				FROM = {
					job_treasurer = {
						character = yes
						age = 16
						custom_tooltip = {
							text = IS_NOT_INCAPACITATED
							is_incapacitated_trigger = no
						}
						in_command = no
					}
				}
			}
		}
		effect = {
			location = {
				add_province_modifier =  {
					name = recent_cutback
					hidden = yes
					duration = 120
				}
			}
			FROM = {
				character_event = {
					id = lizardman.261
				}
			} #Choose who will cut back your jungle
		}
		ai_will_do = {
			factor = 0.1
			modifier = {
				factor = 0.1
				FROM = {
					NOT = {
						wealth = 50
					}
				}
			}
			modifier = {
				factor = 2
				location = {
					has_province_modifier = lustria_dense_jungle
				}
			}
			modifier = {
				factor = 5
				location = {
					has_province_modifier = lustria_oppressive_jungle
				}
			}
		}
	}

	z_purge_province = {
		filter = sub_realm_owned
		ai_target_filter = sub_realm_owned
		from_potential = {
		}
		potential = {
			holder_scope = {
				character = FROM
			}
			dejure_liege_title = {
				holder_scope = {
					character = FROM
				}
			}
			FROM = {
				culture_group = lizardman_group
			}
			NOT = {
				location = {
					culture_group = lizardman_group
				}
			}
		}
		allow = {
			holder_scope = {
				#has_character_modifier = favour_sotek
				war = no
			}
		}
		effect = {
			save_event_target_as = purge_prov
			location = {
				add_province_modifier = {
					name = z_being_purged duration = 3650
				}
			}
			FROM = {
				character_event = {
					id = z_purge.0
				}
			}
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 0
		}
	}
}
